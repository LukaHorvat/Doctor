{"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs \" rawRef;":[{"snippetEnd":51,"snippetInternal":false,"snippetString":"rawRef :: Parser Ref\nrawRef = between (word \"(-\") (string \"-)\") ref\n    where internal   = word \"~\" *> return True <|> return False\n          ref        = Ref <$> internal <*> provider <*> path <*> markers\n          markers    = many marker\n          marker     = try $ many1 markerChar <* word \";\"\n          markerChar = noneOf \"-;\" <|> try (char '-' <* notFollowedBy (char ')'))\n          provider   = path\n","snippetCommit":"","snippetStart":44,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs ","refIdMarker":"rawRef","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs \" tagged;":[{"snippetEnd":55,"snippetInternal":false,"snippetString":"tagged :: Parser Chunk\ntagged = Tagged <$> closed <*> rawRef\n    where closed = between (char '{') (char '}') $ many1 charOrEscape\n","snippetCommit":"","snippetStart":53,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs ","refIdMarker":"tagged","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Main.hs\" ":[{"snippetEnd":49,"snippetInternal":true,"snippetString":"{-# LANGUAGE QuasiQuotes #-}\nmodule Main where\n\nimport Common.Prelude\nimport System.Environment\nimport System.FilePath ((</>))\nimport qualified System.FilePath as FP\nimport qualified System.Directory as Dir\nimport Common.TH\nimport qualified Parsing.Docs as Docs\nimport qualified Render.Compile as Comp\nimport qualified Render.Html as Html\n\nmanual :: String\nmanual = [str|\n    USAGE:\n\n    doctor <path to git repo/git url> <path to docs>\n        The usual usage. Builds the documentation connecting the references to the specified repository.\n\n    doctor /help\n        Shows this page |]\n\ngetAbsDirectoryContents :: FilePath -> IO [FilePath]\ngetAbsDirectoryContents dir = relative >>= mapM (Dir.canonicalizePath . (dir </>))\n    where relative = filter (`notElem` [\".\", \"..\"]) <$> Dir.getDirectoryContents dir\n\nisPhd :: FilePath -> Bool\nisPhd = (== \".md\") . FP.takeExtension\n\nmain :: IO ()\nmain = do\n    args <- getArgs\n    case args of\n        [\"/help\"]   -> putStrLn manual\n        [prov, docs] -> do\n            files <- getAbsDirectoryContents docs\n            forM_ (filter isPhd files) $ \\f -> do\n                eith <- Docs.fromString <$> readFile f\n                let phdOut = FP.dropExtension f `FP.addExtension` \".phd\"\n                let htmlOut = FP.dropExtension f `FP.addExtension` \".html\"\n                case eith of\n                    Left err  -> print err\n                    Right doc -> do\n                        (doc', phd) <- Comp.compile prov doc\n                        Comp.phdToFile phdOut phd\n                        writeFile htmlOut $ Html.render doc' phd\n        _           -> putStrLn \"Expected two command line arguments. Try /help.\"\n\n","snippetCommit":"","snippetStart":1,"snippetRefId":{"refIdFile":"src/Main.hs","refIdMarker":"","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs \" data Doc;doc;":[{"snippetEnd":9,"snippetInternal":false,"snippetString":"data Doc = Doc [Chunk] deriving (Show, Eq, Ord, Read)\n","snippetCommit":"","snippetStart":9,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs ","refIdMarker":"data Doc","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}},{"snippetEnd":75,"snippetInternal":false,"snippetString":"doc :: Parser Doc\ndoc = Doc <$> many chunk\n","snippetCommit":"","snippetStart":74,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs ","refIdMarker":"doc","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Main.hs\" manual;main;":[{"snippetEnd":22,"snippetInternal":false,"snippetString":"manual :: String\nmanual = [str|\n    USAGE:\n\n    doctor <path to git repo/git url> <path to docs>\n        The usual usage. Builds the documentation connecting the references to the specified repository.\n\n    doctor /help\n        Shows this page |]\n","snippetCommit":"","snippetStart":14,"snippetRefId":{"refIdFile":"src/Main.hs","refIdMarker":"manual","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}},{"snippetEnd":48,"snippetInternal":false,"snippetString":"main :: IO ()\nmain = do\n    args <- getArgs\n    case args of\n        [\"/help\"]   -> putStrLn manual\n        [prov, docs] -> do\n            files <- getAbsDirectoryContents docs\n            forM_ (filter isPhd files) $ \\f -> do\n                eith <- Docs.fromString <$> readFile f\n                let phdOut = FP.dropExtension f `FP.addExtension` \".phd\"\n                let htmlOut = FP.dropExtension f `FP.addExtension` \".html\"\n                case eith of\n                    Left err  -> print err\n                    Right doc -> do\n                        (doc', phd) <- Comp.compile prov doc\n                        Comp.phdToFile phdOut phd\n                        writeFile htmlOut $ Html.render doc' phd\n        _           -> putStrLn \"Expected two command line arguments. Try /help.\"\n","snippetCommit":"","snippetStart":31,"snippetRefId":{"refIdFile":"src/Main.hs","refIdMarker":"main","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs \" ":[{"snippetEnd":76,"snippetInternal":true,"snippetString":"module Parsing.Docs where\n\nimport Common.Prelude\nimport Text.Parsec hiding ((<|>), many)\nimport Text.Parsec.String\nimport Text.Parsec.Token (stringLiteral)\nimport Text.Parsec.Language (haskell)\n\ndata Doc = Doc [Chunk] deriving (Show, Eq, Ord, Read)\ndata Command = ChangeProvider String | ChangeFile String | Break deriving (Show, Eq, Ord, Read)\ndata Chunk = Untagged String | Tagged String Ref | Command Command deriving (Show, Eq, Ord, Read)\ndata Ref = Ref { refInternal :: Bool\n               , refProvider :: String\n               , refFile     :: String\n               , refMarkers  :: [String]}  deriving (Show, Eq, Ord, Read)\n\nrefToString :: Ref -> String\nrefToString Ref { refProvider = prov, refFile = file, refMarkers = markers } =\n    \"!\" ++ show prov ++ \" \" ++ show file ++ \" \" ++ concatMap (++ \";\") markers\n\nfromString :: String -> Either ParseError Doc\nfromString = parse doc \"\"\n\nstringLit :: Parser String\nstringLit = stringLiteral haskell\n\npath :: Parser String\npath = withSpaces $ char '!' *> (lookAhead (char '\"') *> stringLit <|> many (noneOf \" \"))\n\ncharOrEscape :: Parser Char\ncharOrEscape = char '\\\\' *> oneOf \"\\\\}{(\"\n           <|> noneOf \"\\\\}{(\"\n           <|> try (char '(' <* notFollowedBy (char '-'))\n\nwithSpaces :: Parser a -> Parser a\nwithSpaces p = p <* many (oneOf \" \\t\")\n\nword :: String -> Parser String\nword = withSpaces . string\n\nnumber :: Parser Int\nnumber = withSpaces $ read <$> many1 digit\n\nrawRef :: Parser Ref\nrawRef = between (word \"(-\") (string \"-)\") ref\n    where internal   = word \"~\" *> return True <|> return False\n          ref        = Ref <$> internal <*> provider <*> path <*> markers\n          markers    = many marker\n          marker     = try $ many1 markerChar <* word \";\"\n          markerChar = noneOf \"-;\" <|> try (char '-' <* notFollowedBy (char ')'))\n          provider   = path\n\ntagged :: Parser Chunk\ntagged = Tagged <$> closed <*> rawRef\n    where closed = between (char '{') (char '}') $ many1 charOrEscape\n\ncommandChar :: Parser Char\ncommandChar = noneOf \"-\" <|> try (char '-' <* notFollowedBy (char ')'))\n\ncommand :: Parser Command\ncommand = ChangeProvider <$> (word \"provider\" *> many1 commandChar)\n      <|> ChangeFile     <$> (word \"file\" *> many1 commandChar)\n      <|> word \"break\" *> return Break\n\ncommandChunk :: Parser Chunk\ncommandChunk = Command <$> between (word \"(-\") (string \"-)\") command\n\nuntagged :: Parser Chunk\nuntagged = Untagged <$> many1 charOrEscape\n\nchunk :: Parser Chunk\nchunk = tagged <|> commandChunk <|> untagged\n\ndoc :: Parser Doc\ndoc = Doc <$> many chunk\n\n","snippetCommit":"","snippetStart":1,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs ","refIdMarker":"","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}]}