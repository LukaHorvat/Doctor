{"!\"dist/build/Doctor-Haskell/Doctor-Haskell.exe\" \"src/Main.hs\" manual;main;":[{"snippetEnd":22,"snippetString":"manual :: String\nmanual = [str|\n    USAGE:\n\n    doctor <path to git repo/git url> <path to docs>\n        The usual usage. Builds the documentation connecting the references to the specified repository.\n\n    doctor /help\n        Shows this page |]\n","snippetFile":"src/Main.hs","snippetCommit":"","snippetStart":14},{"snippetEnd":48,"snippetString":"main :: IO ()\nmain = do\n    args <- getArgs\n    case args of\n        [\"/help\"]   -> putStrLn manual\n        [prov, docs] -> do\n            files <- getAbsDirectoryContents docs\n            forM_ (filter isPhd files) $ \\f -> do\n                eith <- Docs.fromString <$> readFile f\n                let phdOut = FP.dropExtension f `FP.addExtension` \".phd\"\n                let htmlOut = FP.dropExtension f `FP.addExtension` \".html\"\n                case eith of\n                    Left err  -> print err\n                    Right doc -> do\n                        phd <- Comp.compile prov doc\n                        Comp.phdToFile phdOut phd\n                        writeFile htmlOut $ Html.render doc phd\n        _           -> putStrLn \"Expected two command line arguments. Try /help.\"\n","snippetFile":"src/Main.hs","snippetCommit":"","snippetStart":31}],"!\"dist/build/Doctor-Haskell/Doctor-Haskell.exe\" \"src/Main.hs\" ":[{"snippetEnd":49,"snippetString":"{-# LANGUAGE QuasiQuotes #-}\nmodule Main where\n\nimport Common.Prelude\nimport System.Environment\nimport System.FilePath ((</>))\nimport qualified System.FilePath as FP\nimport qualified System.Directory as Dir\nimport Common.TH\nimport qualified Parsing.Docs as Docs\nimport qualified Render.Compile as Comp\nimport qualified Render.Html as Html\n\nmanual :: String\nmanual = [str|\n    USAGE:\n\n    doctor <path to git repo/git url> <path to docs>\n        The usual usage. Builds the documentation connecting the references to the specified repository.\n\n    doctor /help\n        Shows this page |]\n\ngetAbsDirectoryContents :: FilePath -> IO [FilePath]\ngetAbsDirectoryContents dir = relative >>= mapM (Dir.canonicalizePath . (dir </>))\n    where relative = filter (`notElem` [\".\", \"..\"]) <$> Dir.getDirectoryContents dir\n\nisPhd :: FilePath -> Bool\nisPhd = (== \".md\") . FP.takeExtension\n\nmain :: IO ()\nmain = do\n    args <- getArgs\n    case args of\n        [\"/help\"]   -> putStrLn manual\n        [prov, docs] -> do\n            files <- getAbsDirectoryContents docs\n            forM_ (filter isPhd files) $ \\f -> do\n                eith <- Docs.fromString <$> readFile f\n                let phdOut = FP.dropExtension f `FP.addExtension` \".phd\"\n                let htmlOut = FP.dropExtension f `FP.addExtension` \".html\"\n                case eith of\n                    Left err  -> print err\n                    Right doc -> do\n                        phd <- Comp.compile prov doc\n                        Comp.phdToFile phdOut phd\n                        writeFile htmlOut $ Html.render doc phd\n        _           -> putStrLn \"Expected two command line arguments. Try /help.\"\n\n","snippetFile":"src/Main.hs","snippetCommit":"","snippetStart":1}]}