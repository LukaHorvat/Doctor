{"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Main.hs\" ":[],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs\" ":[],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs\" rawRef;":[{"snippetEnd":48,"snippetInternal":false,"snippetString":"rawRef :: Parser Ref\nrawRef = between (word \"(-\") (string \"-)\") ref\n    where internal   = word \"~\" *> return True <|> return False\n          ref        = Ref <$> internal <*> provider <*> path <*> markers\n          markers    = many marker\n          marker     = try $ many1 markerChar <* word \";\"\n          markerChar = noneOf \"-;\" <|> try (char '-' <* notFollowedBy (char ')'))\n          provider   = char '!' *> path <|> return \"\"\n","snippetCommit":"","snippetStart":41,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs","refIdMarker":"rawRef","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Main.hs\" manual;main;":[{"snippetEnd":22,"snippetInternal":false,"snippetString":"manual :: String\nmanual = [str|\n    USAGE:\n\n    doctor <path to git repo/git url> <path to docs>\n        The usual usage. Builds the documentation connecting the references to the specified repository.\n\n    doctor /help\n        Shows this page |]\n","snippetCommit":"","snippetStart":14,"snippetRefId":{"refIdFile":"src/Main.hs","refIdMarker":"manual","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}},{"snippetEnd":48,"snippetInternal":false,"snippetString":"main :: IO ()\nmain = do\n    args <- getArgs\n    case args of\n        [\"/help\"]   -> putStrLn manual\n        [prov, docs] -> do\n            files <- getAbsDirectoryContents docs\n            forM_ (filter isPhd files) $ \\f -> do\n                eith <- Docs.fromString <$> readFile f\n                let phdOut = FP.dropExtension f `FP.addExtension` \".phd\"\n                let htmlOut = FP.dropExtension f `FP.addExtension` \".html\"\n                case eith of\n                    Left err  -> print err\n                    Right doc -> do\n                        (doc', phd) <- Comp.compile prov doc\n                        Comp.phdToFile phdOut phd\n                        writeFile htmlOut $ Html.render doc' phd\n        _           -> putStrLn \"Expected two command line arguments. Try /help.\"\n","snippetCommit":"","snippetStart":31,"snippetRefId":{"refIdFile":"src/Main.hs","refIdMarker":"main","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs\" tagged;":[{"snippetEnd":52,"snippetInternal":false,"snippetString":"tagged :: Parser Chunk\ntagged = Tagged <$> closed <*> rawRef\n    where closed = between (char '{') (char '}') $ many1 charOrEscape\n","snippetCommit":"","snippetStart":50,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs","refIdMarker":"tagged","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}],"!\"./dist/build/doctor-haskell/doctor-haskell.exe\" \"src/Parsing/Docs.hs\" data Doc;doc;":[{"snippetEnd":14,"snippetInternal":false,"snippetString":"data Doc = Doc [Chunk] deriving (Show, Eq, Ord, Read)\ndata Chunk = Untagged String | Tagged String Ref deriving (Show, Eq, Ord, Read)\ndata Ref = Ref { refInternal :: Bool\n               , refProvider :: String\n               , refFile     :: String\n               , refMarkers  :: [String]}  deriving (Show, Eq, Ord, Read)\n","snippetCommit":"","snippetStart":9,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs","refIdMarker":"data Doc","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}},{"snippetEnd":61,"snippetInternal":false,"snippetString":"doc :: Parser Doc\ndoc = Doc <$> many chunk\n","snippetCommit":"","snippetStart":60,"snippetRefId":{"refIdFile":"src/Parsing/Docs.hs","refIdMarker":"doc","refIdProvider":"./dist/build/doctor-haskell/doctor-haskell.exe"}}]}